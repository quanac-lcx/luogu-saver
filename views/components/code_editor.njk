{% macro codeEditor(id, name, value = '', language = 'html', placeholder = '', rows = 10, label = '') %}
<div class="field">
    {% if label %}
    <label for="{{ id }}-input">{{ label }}</label>
    {% endif %}
    <textarea name="{{ name }}" id="{{ id }}-data" style="display: none;">{{ value }}</textarea>

    <div id="{{ id }}" class="code-editor-container"
         style="position: relative; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; font-family: 'Fira Code', monospace; font-size: 14px; line-height: 1.5;">

        <div id="{{ id }}-highlight" class="code-editor-highlight"
             style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; padding: 12px; box-sizing: border-box; pointer-events: none; overflow: hidden; background: #ffffff; tab-size: 4;">
        </div>

        <textarea
            id="{{ id }}-input"
            rows="{{ rows }}"
            placeholder="{{ placeholder }}"
            spellcheck="false"
            autocorrect="off"
            autocapitalize="off"
            class="code-editor-textarea"
            style="position: relative; z-index: 2; display: block; width: 100%; min-height: {{ rows * 1.5 * 14 + 24 }}px; margin: 0; padding: 12px; box-sizing: border-box; font-family: inherit; font-size: inherit; line-height: inherit; border: none; outline: none; resize: vertical; color: transparent; caret-color: black; background: transparent; white-space: pre; overflow-wrap: normal; overflow: auto; tab-size: 4; scrollbar-width: none;">{{ value }}</textarea>
    </div>
</div>

<style>
.code-editor-textarea::-webkit-scrollbar {
    display: none;
}
</style>

<script type="module">
import { createHighlighter } from 'https://fastly.jsdelivr.net/npm/shiki@latest/+esm';

(async function() {
    const id = '{{ id }}';
    const dataTextarea = document.getElementById(id + '-data');
    const inputTextArea = document.getElementById(id + '-input');
    const highlightDiv = document.getElementById(id + '-highlight');
    const language = '{{ language }}';

    const styleId = 'shiki-reset-style';
    if (!document.getElementById(styleId)) {
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .code-editor-highlight pre,
            .code-editor-highlight code {
                white-space: pre !important; margin: 0 !important; padding: 0 !important;
                border: none !important; background-color: transparent !important;
                overflow: visible !important; font-family: inherit !important;
                font-size: inherit !important; line-height: inherit !important;
                tab-size: inherit !important;
            }
        `;
        document.head.appendChild(style);
    }

    let highlighter;
    try {
        highlighter = await createHighlighter({
            themes: ['github-light'],
            langs: [language, 'html', 'css', 'javascript', 'text']
        });
    } catch (e) {
        console.error('代码高亮器加载失败:', e);
        inputTextArea.style.color = 'black';
        return;
    }

    function updateHighlight() {
        const code = inputTextArea.value;
        const codeForHighlight = code + '\n';

        try {
            const html = highlighter.codeToHtml(codeForHighlight, { lang: language, theme: 'github-light' });
            highlightDiv.innerHTML = html;
            dataTextarea.value = code;
        } catch (e) {
            highlightDiv.textContent = codeForHighlight;
        }
        syncScroll();
    }

    function syncScroll() {
        highlightDiv.scrollTop = inputTextArea.scrollTop;
        highlightDiv.scrollLeft = inputTextArea.scrollLeft;
    }

    inputTextArea.addEventListener('input', () => {
        setTimeout(updateHighlight, 0);
    });

    inputTextArea.addEventListener('scroll', syncScroll);

    inputTextArea.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
            e.preventDefault();
            document.execCommand('insertText', false, '\t');
            setTimeout(updateHighlight, 0);
        }
    });

    updateHighlight();
})();
</script>
{% endmacro %}